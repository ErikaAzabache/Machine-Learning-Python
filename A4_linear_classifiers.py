# -*- coding: utf-8 -*-
"""Assignment_4_solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oFFijcvbBEHDdtDxNRNuI8G7SLJ0beO_
"""

from google.colab import drive, auth
auth.authenticate_user()
import requests
gcloud_token = !gcloud auth print-access-token
drive.mount('/content/drive', force_remount=True)

with open('/content/drive/My Drive/Colab Notebooks/Assignment_1_Script.py') as infile:
    exec(infile.read())

excelfile = '/content/drive/My Drive/Data/Assignment_4_Data_and_Template.xlsx'

"""### Importing data"""

sheets=getSheetNames(excelfile);sheets

Ntraining=6600
d=15

training=(readExcel(excelfile,
                  sheetname='Training Data',
                  startrow=2,
                  endrow=(Ntraining+1),
                  startcol=1,
                  endcol=17)).astype(int);training.shape

testing=(readExcel(excelfile,
                  sheetname='To be classified',
                  startrow=5,
                  endrow=54,
                  startcol=1,
                  endcol=15)).astype(int);testing.shape

"""### Preprocessing

X: training set

Tb: labels for binary classifier

Tmc: labels for multiclass (6) classifier (one hot encoder)

Xtest: testing set
"""

X=np.array(training[:,:15]);print(X[:2,:]);
T=np.array(training[:,15:17]);print(T[:2,:]);

X.shape

Tb=T[:,0]; print(Tb.shape) # alert, binary

Tmc=T[:,1]; print(Tmc); # diagnosis code, multiclass
#Tmc0= np.zeros((Tmc.size, Tmc.max()+1), dtype=int)
Tmc0= np.full((Tmc.size, Tmc.max()+1), -1)
Tmc0[np.arange(Tmc.size),Tmc] = 1
print(Tmc0); print(Tmc0.shape)



Xtest=np.array(testing[:,:]);Xtest.shape

Ntesting=np.size(Xtest,0); print(Ntesting)

np.unique(T[:,-1]) # We need 6 classes for the diagnosis codes

"""### Training

Xa: {N x d+1}
"""

Xones=np.ones((Ntraining,1), dtype=int);Xones.shape

Xa=np.append(Xones,X,axis=1);print(Xa[:2,:])

Xa.shape

"""Using the pseudoinverse method in the training set:"""

Xapinv = np.linalg.pinv(Xa);
print(np.round(Xapinv, decimals=3))

Xapinv.shape

"""Augmented testing set:"""

Xones=np.ones((Ntesting,1), dtype=int);Xones.shape

Xatest=np.append(Xones,Xtest,axis=1);print(Xatest[:2,:])

"""### Binary Classifier"""

Wb=np.dot(Xapinv,Tb);print(Wb);print(Wb.shape)

Tbtest=np.sign(np.dot(Xatest,Wb)); print(Tbtest); print(Tbtest.shape)

"""### Multiclass Classifier"""

Wmc=np.dot(Xapinv,Tmc0);print(Wmc);print(Wmc.shape)

Tmctest0=np.dot(Xatest,Wmc);#print(Tmctest0)

#Tmctest1=np.zeros((np.size(Tmctest0, axis=0), np.size(Tmctest0, axis=1))); print(Tmctest1.shape)

Tmctest=np.argmax(Tmctest0, axis=1); print(Tmctest); print(Tmctest.shape)

#Tmctest1[np.arange(np.size(Tmctest0, axis=0)), Tmctest]=1; print(Tmctest1)

"""### Performance

For simplicity, as requested for this assignment, we calculate the labels for the training set used to get the weights to calculate the confussion matrix
"""

def build_binary_confusion_matrix(actual_matrix, predicted_matrix):
  C=2
  confusion_matrix=np.zeros((C,C), dtype=int)
  N=np.size(actual_matrix, axis=0)
  for i in range(N):
    if actual_matrix[i]==predicted_matrix[i]:
      if actual_matrix[i]==1:
        confusion_matrix[0,0]+=1
      else:
        confusion_matrix[1,1]+=1
    else:
      if actual_matrix[i]==1:
        confusion_matrix[0,1]+=1
      else:
        confusion_matrix[1,0]+=1
  return confusion_matrix

def build_confusion_matrix(actual_matrix, predicted_matrix, n_classes):
  C=n_classes
  confusion_matrix=np.zeros((C,C), dtype=int)
  N=np.size(actual_matrix, axis=0)
  for i in range(N):
    confusion_matrix[actual_matrix[i], predicted_matrix[i]]+=1
  return confusion_matrix

"""#### Binary"""

Tbcalc=np.sign(np.dot(Xa,Wb)); print(Tbcalc.shape)

"""##### Confusion Matrix"""

CMb=build_binary_confusion_matrix(Tb,Tbcalc);print(CMb)

"""#### Multiclass"""

Tmccalc0=np.dot(Xa,Wmc)
Tmccalc=np.argmax(Tmccalc0, axis=1); print(Tmccalc)

"""##### Confusion Matrix"""

CMmc=build_confusion_matrix(Tmc, Tmccalc, 6);print(CMmc)

"""### Writing to Template"""

with open('/content/drive/My Drive/Colab Notebooks/Assignment_4_Script.py') as infile:
    exec(infile.read())

excelfile = '/content/drive/My Drive/Data/Assignment_4_Data_and_Template.xlsx'

writeExcelData(Wb.T,excelfile,'Classifiers',5,1)
writeExcelData(Wmc,excelfile,'Classifiers',5,5)
print("Weights for binary and multiclass classifiers have been written!")

writeExcelData(Tbtest,excelfile,'To be classified',5,16)
writeExcelData(Tmctest,excelfile,'To be classified',5,17)
print("Labels for failure alert and diagnosis code have been written!")

writeExcelData(CMb,excelfile,'Performance',10,3)
writeExcelData(CMmc,excelfile,'Performance',19,3)
print("Binary and Multiclass confusion matrices have been written!")