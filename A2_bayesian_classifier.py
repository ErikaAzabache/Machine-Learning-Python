# -*- coding: utf-8 -*-
"""updated_Assignment_2_Classroom.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11TgfKjKOFRx67RTeCdc4jjLffO08QIoU

# Import packages
"""

from google.colab import drive, auth
auth.authenticate_user()
import requests
gcloud_token = !gcloud auth print-access-token
drive.mount('/content/drive', force_remount=True)

with open('/content/drive/My Drive/Colab Notebooks/Assignment_2_Script.py') as infile:
    exec(infile.read())

"""# Function Definitions"""

def Build2DHistogramClassifier(X,T,B,xmin,xmax):
    HF=np.zeros([B,B]).astype('int32');
    HM=np.zeros([B,B]).astype('int32');
    RC=(np.round(((B-1)*(X-xmin)/(xmax-xmin)))).astype('int32');
    for i,rc in enumerate(RC):
        if T[i]=='Female':
            HF[rc[0],rc[1]]+=1;
        else:
            HM[rc[0],rc[1]]+=1;
    return [HF, HM]

def Apply2DHistogramClassifier(queries,HF,HM,xmin,xmax):
    B=np.alen(HF);
    RC=(np.round(((B-1)*(queries-xmin)/(xmax-xmin)))).astype('int32');
    countF=HF[RC[:,0],RC[:,1]];
    countM=HM[RC[:,0],RC[:,1]];
    resultlabel=np.full(np.alen(RC),"Indeterminate",dtype=object);
    resultprob=np.full(np.alen(RC),np.nan,dtype=object);
    indicesF=countF>countM;
    indicesM=countM>countF;
    resultlabel[indicesF]="Female";
    resultlabel[indicesM]="Male";
    probF=countF/(countF+countM);
    probM=countM/(countF+countM);
    resultprob[indicesF]=probF[indicesF];
    resultprob[indicesM]=probM[indicesM];
    return resultlabel, resultprob

def Build2DBayesianClassifier(X,T):
    muF=np.mean(X[T=='Female'],axis=0);
    muM=np.mean(X[T=='Male'],axis=0);
    sigmaF=np.cov(X[T=='Female'],rowvar=False);
    sigmaM=np.cov(X[T=='Male'],rowvar=False);
    NF=len(T[T=='Female']);
    NM=len(T[T=='Male']);
    return [muF,muM,sigmaF,sigmaM,NF,NM]

def pdf(x,mu,sigma):
    d=np.alen(mu)
    dfact1=(2*np.pi)**d
    dfact2=np.linalg.det(sigma)
    fact=1/np.sqrt(dfact1*dfact2)
    xc=x-mu
    isigma=-0.5*np.linalg.inv(sigma)
    if len(np.shape(x)) == 1:
      return fact*np.exp(np.dot(np.dot(xc, isigma),xc))
    else:
      return fact\
        *np.exp(
            [np.dot(np.dot(v, isigma),v) for v in xc]
        )

def Apply2DBayesianClassifier(queries,muF,MuM,sigmaF,sigmaM,NF,NM):
    A=1;
    countF=NF*A*pdf(queries,muF,sigmaF)
    countM=NM*A*pdf(queries,muM,sigmaM)
    resultlabel=np.full(np.alen(queries),"Indeterminate",dtype=object);
    resultprob=np.full(np.alen(queries),np.nan,dtype=object);
    indicesF=countF>countM;
    indicesM=countM>countF;
    resultlabel[indicesF]="Female";
    resultlabel[indicesM]="Male";
    probF=countF/(countF+countM);
    probM=countM/(countF+countM);
    resultprob[indicesF]=probF[indicesF];
    resultprob[indicesM]=probM[indicesM];
    return resultlabel, resultprob

"""# Prepare data"""

excelfile = '/content/drive/My Drive/Data/Assignment_2_Data_and_Template.xlsx'

sheets=getSheetNames(excelfile);sheets

data=readExcel(excelfile)
X=np.array(data[:,1:],dtype=float);T=data[:,0];

queries=(readExcel(excelfile,
                  sheetname='Queries',
                  startrow=3,
                  endrow=6,
                  startcol=1,
                  endcol=2)).astype(float);queries

"""# Histogram Classifier"""

B=10;
xmin=np.amin(X,axis=0);
xmax=np.amax(X,axis=0);
[HF,HM]=Build2DHistogramClassifier(X,T,B,xmin,xmax);

show2DHistograms(HF, HM)

[htF, hsF] = X[T=='Female'].T
[htM, hsM] = X[T=='Male'].T

plt.scatter(htF, hsF, marker='_', color='r')
plt.scatter(htM, hsM, marker='|', color='b')
plt.xlim(xmin[0]-1,xmax[0]+1)
plt.ylim(xmin[1]-1,xmax[1]+1)
plt.show()

[GH, PH]=Apply2DHistogramClassifier(queries,HF,HM,xmin,xmax)

showResult(queries, GH, PH)

"""# Bayesian Classifier"""

[muF,muM,sigmaF,sigmaM,NF,NM]=Build2DBayesianClassifier(X,T)

[GB, PB]=Apply2DBayesianClassifier(queries,muF,muM,sigmaF,sigmaM,NF,NM)

showResult(queries, GB, PB)

showAllResults(queries, GH, PH, GB, PB)

check_all_vars(all_vars)

# print("Please wait. Writing to Excel ...")
# writeExcelData([xmin[0],xmax[0],xmin[1],xmax[1]],excelfile,'Female Histogram',1,2)
# writeExcelData([str(B)+'x'+str(B)],excelfile,'Female Histogram',6,2)
# writeExcelData(HF,excelfile,'Female Histogram',7,2)
# print("Written Sheet \'Female Histogram\'")

# writeExcelData([xmin[0],xmax[0],xmin[1],xmax[1]],excelfile,'Male Histogram',1,2)
# writeExcelData([str(B)+'x'+str(B)],excelfile,'Male Histogram',6,2)
# writeExcelData(HM,excelfile,'Male Histogram',7,2)
# print("Written Sheet \'Male Histogram\'")

# writeExcelData([muF,muM],excelfile,'Bayesian',1,3)
# writeExcelData(np.concatenate((sigmaF,sigmaM)),excelfile,'Bayesian',4,3)
# writeExcelData([NF,NM],excelfile,'Bayesian',9,3)
# print("Written Sheet \'Bayesian\'")

# writeExcelData(list(zip(*[GH,PH,GB,PB])),excelfile,'Queries',3,3)
# print("Written Sheet \'Queries\'")

# closeExcelFile(excelfile)
# print("DONE!")

"""SKIP THE FOLLOWING IF YOU ARE NOT ATTEMPTING THE EXTRA CREDIT SECTION"""

# writeExcelData([xmin[0],xmax[0],xmin[1],xmax[1]],excelfile,'Reconstructed Female Histogram',1,2)
# writeExcelData([str(B)+'x'+str(B)],excelfile,'Reconstructed Female Histogram',6,2)
# writeExcelData(HFrec,excelfile,'Reconstructed Female Histogram',7,2)
# print("Written Sheet \'Reconstructed Female Histogram\'")

# writeExcelData([xmin[0],xmax[0],xmin[1],xmax[1]],excelfile,'Reconstructed Male Histogram',1,2)
# writeExcelData([str(B)+'x'+str(B)],excelfile,'Reconstructed Male Histogram',6,2)
# writeExcelData(HMrec,excelfile,'Reconstructed Male Histogram',7,2)
# print("Written Sheet \'Reconstructed Male Histogram\'")