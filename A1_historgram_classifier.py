# -*- coding: utf-8 -*-
"""Assignment_1_Classroom-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S6M1CDtzN-qnQMzwC-LOd5t_GIhViPTC

# Import packages
"""

from google.colab import drive, auth
auth.authenticate_user()
import requests
gcloud_token = !gcloud auth print-access-token
drive.mount('/content/drive', force_remount=True)

with open('/content/drive/My Drive/Colab Notebooks/Assignment_1_Script.py') as infile:
    exec(infile.read())

"""# Prepare Data"""

excelfile = '/content/drive/My Drive/Data/Assignment_1_Data_and_Template.xlsx'

data=readExcel(excelfile)
X=np.array(data[:,0]*12+data[:,1],dtype=float)
T=np.array(data[:,2])

queries=(readExcel(excelfile,
                  sheetname='Queries',
                  startrow=3,
                  endrow=8,
                  startcol=1,
                  endcol=1)).astype(float);queries

"""# Histogram

### Full Data Histogram Classifier
"""

def BuildHistogramClassifiers(X, T, B, minheight, maxheight):
  HF = np.zeros(B).astype(int)
  HM = np.zeros(B).astype(int)
  binindices = np.round((B-1)*(X - minheight)/(maxheight - minheight)).astype(int)
  for i, b in enumerate(binindices):
    if T[i]=='Female':
      HF[b]+=1
    else:
      HM[b]+=1
  return [HF, HM]

B = 32
minheight = np.amin(X)
maxheight = np.amax(X)
[HF, HM] = BuildHistogramClassifiers(X, T, B, minheight, maxheight)

showHistograms(HF, HM, minheight, maxheight)

binindices = np.round((B-1)*(queries - minheight)/(maxheight - minheight)).astype(int)
binindices

countF = HF[binindices]
countF

HF

countM = HM[binindices]
countM

indicesF = countF>countM
indicesF

resultlabels = np.full(len(queries), 'Indeterminate', dtype=object)
resultlabels[indicesF] = 'Female'
resultlabels

indicesM = countM>countF
indicesM

def ApplyHistogramClassifiers(queries, HF, HM, minheight, maxheight):
  B = len(HF)
  binindices = np.round((B-1)*(queries - minheight)/(maxheight - minheight)).astype(int)
  countF = HF[binindices]
  countM = HM[binindices]
  resultlabels = np.full(len(queries), 'Indeterminate', dtype=object)
  resultprobs = np.full(len(queries), np.nan, dtype=object)
  indicesF = countF>countM
  indicesM = countM>countF
  probF=countF/(countF+countM)
  probM=countM/(countF+countM)
  resultlabels[indicesF] = 'Female'
  resultlabels[indicesM] = 'Male'
  resultprobs[indicesF] = probF[indicesF]
  resultprobs[indicesM] = probM[indicesM]
  return [resultlabels, resultprobs]

[GH, PH] = ApplyHistogramClassifiers(queries, HF, HM, minheight, maxheight)

[A, B] = ApplyHistogramClassifiers([71], HF, HM, minheight, maxheight)
showResult([71], A, B)

for B in range(4, 32, 8):
  [HF, HM] = BuildHistogramClassifiers(X, T, B, minheight, maxheight)
  showHistograms(HF, HM, minheight, maxheight)
  [GH, PH] = ApplyHistogramClassifiers(queries, HF, HM, minheight, maxheight)
  showResult(queries, GH, PH)

showHistograms(HF, HM, minheight, maxheight)

"""### Partial Data Histogram Classifier"""

X50 = X[:50]
T50 = T[:50]

[HF50, HM50] = BuildHistogramClassifiers(X50, T50, B, minheight, maxheight)

showHistograms(HF50, HM50, minheight, maxheight)

[GH50, PH50] = ApplyHistogramClassifiers(queries, HF50, HM50, minheight, maxheight)

showResult(queries, GH50, PH50)

showResult(queries, GH, PH)

"""# Bayesian

### Full Data Bayesian Classifier
"""

def BuildBayesianClassifier(X, T):
  muF = np.mean(X[T=='Female'])
  muM = np.mean(X[T=='Male'])
  sigmaF = np.std(X[T=='Female'], ddof=1)
  sigmaM = np.std(X[T=='Male'], ddof=1)
  NF = len(T[T=='Female'])
  NM = len(T[T=='Male'])
  return [muF, muM, sigmaF, sigmaM, NF, NM]

[muF, muM, sigmaF, sigmaM, NF, NM] = BuildBayesianClassifier(X, T)

[muF, muM, sigmaF, sigmaM, NF, NM]

def pdf(x, mu, sigma):
  return (1/(np.sqrt(2*np.pi)*sigma))*np.exp(-0.5*((x-mu)/sigma)**2)

pdf(0, 0, 1) #I should get around 0.4

def ApplyBayesianClassifier(queries, muF, muM, sigmaM, sigmaF, NF, NM ):
  w=1
  countF = NF*w*pdf(queries, muF, sigmaF)
  countM = NM*w*pdf(queries, muM, sigmaM)
  resultlabels = np.full(len(queries), 'Indeterminate', dtype=object)
  resultprobs = np.full(len(queries), np.nan, dtype=object)
  indicesF = countF>countM
  indicesM = countM>countF
  probF=countF/(countF+countM)
  probM=countM/(countF+countM)
  resultlabels[indicesF] = 'Female'
  resultlabels[indicesM] = 'Male'
  resultprobs[indicesF] = probF[indicesF]
  resultprobs[indicesM] = probM[indicesM]
  return [resultlabels, resultprobs]

[GB, PB] = ApplyBayesianClassifier(queries, muF, muM, sigmaM, sigmaF, NF, NM)

showResult(queries, GB, PB)

"""### Partial Data Bayesian Classifier"""

# for partial data, just the first 50 samples
[muF50, muM50, sigmaF50, sigmaM50, NF50, NM50] = BuildBayesianClassifier(X50, T50)

[muF50, muM50, sigmaF50, sigmaM50, NF50, NM50]

[GB50, PB50] = ApplyBayesianClassifier(queries, muF50, muM50, sigmaM50, sigmaF50, NF50, NM50)

# Bayesian classifiers need fewer samples to be as good as  histogram classifier with much more samples
showAllResults(queries, GH, PH, GH50, PH50, GB, PB, GB50, PB50)

"""# Summary

# Export Results
"""

check_all_vars(all_vars)

print("Please wait. Writing to Excel ...")
writeExcelData([minheight,maxheight],excelfile,'Classifiers - Full Data',1,2)
writeExcelData([HF],excelfile,'Classifiers - Full Data',5,3)
writeExcelData([HM],excelfile,'Classifiers - Full Data',6,3)
writeExcelData([muF,muM],excelfile,'Classifiers - Full Data',8,3)
writeExcelData([sigmaF,sigmaM],excelfile,'Classifiers - Full Data',11,3)
writeExcelData([NF,NM],excelfile,'Classifiers - Full Data',14,3)
print("Written Sheet \'Classifiers - Full Data\'")

writeExcelData([minheight,maxheight],excelfile,'Classifiers - Partial Data',1,2)
writeExcelData([HF50],excelfile,'Classifiers - Partial Data',5,3)
writeExcelData([HM50],excelfile,'Classifiers - Partial Data',6,3)
writeExcelData([muF50,muM50],excelfile,'Classifiers - Partial Data',8,3)
writeExcelData([sigmaF50,sigmaM50],excelfile,'Classifiers - Partial Data',11,3)
writeExcelData([NF50,NM50],excelfile,'Classifiers - Partial Data',14,3)
print("Written Sheet \'Classifiers - Partial Data\'")

writeExcelData(list(zip(*[GH,PH,GB,PB])),excelfile,'Queries',3,2)
writeExcelData(list(zip(*[GH50,PH50,GB50,PB50])),excelfile,'Queries',12,2)
print("Written Sheet \'Queries\'")
closeExcelFile(excelfile)
print("DONE!")